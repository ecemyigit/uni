/* Define a class Figure with members x, y, color.Protect these members from being accessed by others, except derived classes.
Use Figure as a base class for classes Circle(having a radius r) and Square(having its side length a)
Define constructors for these three classes.Constructors for Circle and Square should accept four parameters : three to be
passed to the base class and one used for Circle of Square.
Implement a function Draw drawing the shape in all classes(the version for Figure may do nothing); if you want,
use Allegro for graphics or just print a message on the screen("drawing circle...")
Create some objects of classes Square and Circle and call the method Draw for them.
Use pointers to Figure to store pointers to created objects of the type Circle and Square.
Call Draw using pointers.*/
#include <iostream>
using namespace std;

class Figure
{
protected:
    double x, y, color;
public:
    Figure(double *a, double *b, double *c) : x(*a){
        y = *b;
        color = *c;
    }
    void print(){
        cout << x << " " << y << " " << color;
    }
    virtual void draw(){
        cout << "Nothing to draw." << endl;
    }

};
class Circle : Figure {
public:
    double r;
    Circle(double a, double b, double c, double d) : Figure(&a, &b, &c){
        r = d;
    }
    void Draw() {
        cout << "Circle: ";
        print();
        cout << " " << r << endl;
    }

};
class Square : Figure {
public:
    double e;
    Square(double a, double b, double c, double  d) : Figure(&a, &b, &c)
    {e = d;}
    void Draw(){
        cout << "Square: ";
        print();
        cout << " " << e << endl;
    }
};

int main(){
    Figure F();
    Circle C(1,2,3,4);
    C.Draw();
    Square S (5,6,7,8);
    S.Draw();
}


